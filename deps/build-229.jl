using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libcairo"], :libcairo),
]

dependencies = [
    "https://github.com/bicycle1885/ZlibBuilder/releases/download/v1.0.1/build_Zlib.v1.2.11.jl",
    "https://github.com/SimonDanisch/LibpngBuilder/releases/download/v1.6.31/build_libpng.v1.0.0.jl",
    "https://github.com/staticfloat/PixmanBuilder/releases/download/v0.34.0-1/build_Pixman.v0.34.0.jl",
    "https://github.com/JuliaGraphics/FreeTypeBuilder/releases/download/v2.9.1/build_FreeType2.v2.9.0.jl"
]

# for url in dependencies
#     download(url, basename(url))
# end
for elem in dependencies
    # it's a bit faster to run the build in an anonymous module instead of
    # starting a new julia process
    m = Module(:__anon__)
    Core.eval(m, :(Main.include($(joinpath(@__DIR__, basename(elem))))))
end

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGraphics/CairoBuilder/releases/download/v1.12.12"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/Cairo.v1.12.12.aarch64-linux-gnu.tar.gz", "128ab2c799f28ea6c46b974244716c02e4cd0ba9f4d99dbd06cea84486a70c15"),
    Linux(:aarch64, :musl) => ("$bin_prefix/Cairo.v1.12.12.aarch64-linux-musl.tar.gz", "cb51e16e171af0dea78947d47c61d1ee5976460e458c64cfe8746c7cfe3e8972"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Cairo.v1.12.12.arm-linux-gnueabihf.tar.gz", "8a699225e6ac5ab945b57d1179ba41e1021f84dddde02df2104e1466d1f1eba4"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/Cairo.v1.12.12.arm-linux-musleabihf.tar.gz", "3cebe2407cfc6dda7e4f2b4f21b57d120ebc6da18c15785e76de92571ef2fb05"),
    Linux(:i686, :glibc) => ("$bin_prefix/Cairo.v1.12.12.i686-linux-gnu.tar.gz", "5011f386292387d76beeea3d33487d09e312daa6c5aaf91033c1c9f4e431d279"),
    Linux(:i686, :musl) => ("$bin_prefix/Cairo.v1.12.12.i686-linux-musl.tar.gz", "d12257d06e73297aa3cd40a556d1f1da2831ffa28b9d5d0a76491552a6e594b9"),
    Windows(:i686) => ("$bin_prefix/Cairo.v1.12.12.i686-w64-mingw32.tar.gz", "3eb3b72323b0a5effafaad8660fbcb5a4a85cbbb16be8ac69fd7d8df0ea99618"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/Cairo.v1.12.12.powerpc64le-linux-gnu.tar.gz", "75fa6f359d200665de028c493250539c1ed5e64137e4ed019c61959fc8e4d3a3"),
    MacOS(:x86_64) => ("$bin_prefix/Cairo.v1.12.12.x86_64-apple-darwin14.tar.gz", "703323019abbdb8c5ac93dc4671479e71694d2fd6266fb55ced5ffbf7eaef934"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/Cairo.v1.12.12.x86_64-linux-gnu.tar.gz", "ba25e83f1f49dce8bb408e4accf914ed774b94d630983a6c8d46d0b66de3f691"),
    Linux(:x86_64, :musl) => ("$bin_prefix/Cairo.v1.12.12.x86_64-linux-musl.tar.gz", "823a3ad3d8370714985a3a8a9dc4f3dc1bc1be1ca8937d482fc69f41bf1079e1"),
    FreeBSD(:x86_64) => ("$bin_prefix/Cairo.v1.12.12.x86_64-unknown-freebsd11.1.tar.gz", "f08161cc296f2daba8ddae0ce664e9f7b2f1bb071787325970d31310eab0718a"),
    Windows(:x86_64) => ("$bin_prefix/Cairo.v1.12.12.x86_64-w64-mingw32.tar.gz", "9718250937e175ecd8306cea6bceb5c18f3d1b1b2e597c7e408340db53ec1bb6"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
