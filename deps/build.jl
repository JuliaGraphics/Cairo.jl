using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcairo"], :libcairo),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/giordano/Yggdrasil/releases/download/Cairo-v1.14.12"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Cairo.v1.14.12.aarch64-linux-gnu.tar.gz", "f5e3a0f4face5142ce8273d25a614452864034077dd840c50ccfb17322f18adf"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Cairo.v1.14.12.aarch64-linux-musl.tar.gz", "f9fcf6750090c3e964c38b06866635163389fdfba0dd4d781e5fb279624b9b3d"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Cairo.v1.14.12.arm-linux-gnueabihf.tar.gz", "804ee9f98b26c5a4a26f0ecfe4abaabf5dbf79f4d7c1486e4ceaadd34ac38033"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Cairo.v1.14.12.arm-linux-musleabihf.tar.gz", "c66e446884509180440f24893b51a39345346ba9cefbf9a8a04ce1de4ed25d98"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Cairo.v1.14.12.i686-linux-gnu.tar.gz", "d4fafd44b5f1301786fc4ddf63fe71ac9e942891dde7f07efb1ee2d6b28b2c6c"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Cairo.v1.14.12.i686-linux-musl.tar.gz", "1fefd232b6238b2718f8ab73bbbb222eae51dd5c157549fb1749f70243aca77f"),
    Windows(:i686) => ("$bin_prefix/Cairo.v1.14.12.i686-w64-mingw32.tar.gz", "1f39115d7c99d102e05edc7eb19db88b4456a4940d3a46ee2151092a6fe862ee"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Cairo.v1.14.12.powerpc64le-linux-gnu.tar.gz", "28517b9460af7cdf25c7fd20d88a9277e00261b6c451179fb6db9edb01c7b8bf"),
    MacOS(:x86_64) => ("$bin_prefix/Cairo.v1.14.12.x86_64-apple-darwin14.tar.gz", "aa1b2a45191ad3b24745f4a5c9eea18c3ef125d67746a29e677f531c806d9cf9"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Cairo.v1.14.12.x86_64-linux-gnu.tar.gz", "2b5758e5a827af82202df4ddf37e7ec4e09579632041d5b8706174f9423bb074"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Cairo.v1.14.12.x86_64-linux-musl.tar.gz", "6c286983562052ac5fc6dbc47d30155d97258257c027215f4a1a34ef59ec7e5a"),
    FreeBSD(:x86_64) => ("$bin_prefix/Cairo.v1.14.12.x86_64-unknown-freebsd11.1.tar.gz", "b50734b6078fe6db4524067b68ce8ccb101b314796da97f46e9256ab44eb8fa3"),
    Windows(:x86_64) => ("$bin_prefix/Cairo.v1.14.12.x86_64-w64-mingw32.tar.gz", "4cdfc0c08af8bcce3529ae13ecee6826acc9a25585151c84a7f6bdfb93200281"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
