using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libfribidi"], :libfribidi),
    ExecutableProduct(prefix, "fribidi", :fribidi),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/FriBidi_jll.jl/releases/download/FriBidi-v1.0.5+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/FriBidi.v1.0.5.aarch64-linux-gnu.tar.gz", "057ef596135fbc22dc3d010437756ed8d9f1936e8c86f6f82b1f03750390ab66"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/FriBidi.v1.0.5.aarch64-linux-musl.tar.gz", "41f6ab7bf5fe43455f743fe6933913100721eb2613a799c1e2cda34271d9a6a3"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/FriBidi.v1.0.5.arm-linux-gnueabihf.tar.gz", "c30b64c43afc1ba87ff34a27d0cf6958b7526d596a83c9154f22d33208e9c5e6"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/FriBidi.v1.0.5.arm-linux-musleabihf.tar.gz", "cb80f1858aed4cf6590861b468e880e415052e001eb072eba2e3156c874963b2"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/FriBidi.v1.0.5.i686-linux-gnu.tar.gz", "8535a2fb132236217130c4772c7807fa83158576c411865f11f8dfb90248d73f"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/FriBidi.v1.0.5.i686-linux-musl.tar.gz", "d39596a283829718ebda0652b6efec6e2b2adea6f4387c0eaec3f62623de6e6a"),
    Windows(:i686) => ("$bin_prefix/FriBidi.v1.0.5.i686-w64-mingw32.tar.gz", "833175614b9fb0988e29af391e2246aeb834348b3af8dcec1e5413f8522bbaa1"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/FriBidi.v1.0.5.powerpc64le-linux-gnu.tar.gz", "f9df22697da46c9b334cb05f9e9a83aae33a98a7fbe53752a45dbc25e59f93fc"),
    MacOS(:x86_64) => ("$bin_prefix/FriBidi.v1.0.5.x86_64-apple-darwin14.tar.gz", "13b8b5273c59801c08ffbfac7495843d303fc0f4a0cb11bfc1e7b5de5835af58"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/FriBidi.v1.0.5.x86_64-linux-gnu.tar.gz", "441b2aeab12ffeec456e2cf38a78fd5975461ab247592f1646d265ff3ff9077b"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/FriBidi.v1.0.5.x86_64-linux-musl.tar.gz", "884e8b6a36027c1e53e546a2bd87980fe66f771b439f86ee9977ac126ce890d4"),
    FreeBSD(:x86_64) => ("$bin_prefix/FriBidi.v1.0.5.x86_64-unknown-freebsd11.1.tar.gz", "cc4f9ee5df10f68899dff51f3e65cab734160c553c088fefdb1ce163bb9ad6b4"),
    Windows(:x86_64) => ("$bin_prefix/FriBidi.v1.0.5.x86_64-w64-mingw32.tar.gz", "160930838c105d1e2f146eb571e349a7cbef8b778517cc22efedbc55e40513e9"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
