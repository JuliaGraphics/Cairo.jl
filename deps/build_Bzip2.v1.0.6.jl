using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libbz2"], :libbzip2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Bzip2_jll.jl/releases/download/Bzip2-v1.0.6+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.aarch64-linux-gnu.tar.gz", "6a8ff8dffc4ecb88b8391629fd365c309d550be7f700984704180e0a79a7a6f7"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.aarch64-linux-musl.tar.gz", "2f33eaec540b7cda1b9ab1eaf3fe91906b36d95b25ad6c6c00606b8db1e86325"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Bzip2.v1.0.6.arm-linux-gnueabihf.tar.gz", "1094f9d6ea29680bad062df2a1c72a69e96cd25a656cd2bd701b414746cd68d7"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Bzip2.v1.0.6.arm-linux-musleabihf.tar.gz", "cb801bdee5c041bed0379925262dda26659c66542c82f06d6c5a933de51f7672"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.i686-linux-gnu.tar.gz", "4e5ed6cc9a96a6d58b69f0670b788e834ad0c7533565f59fdda762e62dfa1db7"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.i686-linux-musl.tar.gz", "bea4651ab2abd89fd1f34a7fdb9ed0d2912ed661ee61d710b0105a2a6f3e4799"),
    Windows(:i686) => ("$bin_prefix/Bzip2.v1.0.6.i686-w64-mingw32.tar.gz", "fe658dc3ece6e7842a2f0ad6f3d917c3ef7a4a42d6d8b54badf06617256d38be"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.powerpc64le-linux-gnu.tar.gz", "5255d531c2ad797f55da444a59b41e1afdd4d8a1beb38ff03bb19c3dfd52dc71"),
    MacOS(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-apple-darwin14.tar.gz", "9da50e301ea0050fd35c30b312ae68a40a3b7832c3f333e5c779807f82c8443e"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-linux-gnu.tar.gz", "95edeac85c9213feb968c6dcdf385d733cea1affc80798f1b7d22404005dd44a"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-linux-musl.tar.gz", "441bfb219f71756fdd9bbff2cabafc5b99d8efa4244ed26baeff064babd5199e"),
    FreeBSD(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-unknown-freebsd11.1.tar.gz", "3792689e6d8b9df85364c3b5240d58e4bb075b26d0f4cbcd47ae0166e4817249"),
    Windows(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-w64-mingw32.tar.gz", "8c096575b9aa1c090fbb880c4a96df7d50e25c409dfdcc6d77c853014c349800"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
