using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libbz2"], :libbzip2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Bzip2_jll.jl/releases/download/Bzip2-v1.0.6+1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.aarch64-linux-gnu.tar.gz", "f729536341dfeffb0ab2d3c87b21be852d6bdeff1e53cd3fc96a792aee57f918"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.aarch64-linux-musl.tar.gz", "f0e57be14bc34266e4211244a7b62d3ea19bd0dac5e1df02716f9f613e9f4ac0"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Bzip2.v1.0.6.arm-linux-gnueabihf.tar.gz", "2246caf56f6903514e5e3df293fcc06196c1ac9b898a62b04149b741c5578862"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Bzip2.v1.0.6.arm-linux-musleabihf.tar.gz", "67912bf11051e37b1cfcef655d3969fe7ac91458d213990e323723dc4ec1f7af"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.i686-linux-gnu.tar.gz", "24d0560bb0cee02ad7aa967d3426310857f074b7802aa47258415ddfef45381f"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.i686-linux-musl.tar.gz", "4a21bed1edb690cd1a08513f34418f316f8b1bbe98c443d8561209079b558edb"),
    Windows(:i686) => ("$bin_prefix/Bzip2.v1.0.6.i686-w64-mingw32.tar.gz", "7b9d067c5ad2103c8c77cda6b0191f52217ac4e185d411b21be9a9531ef3d6ef"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.powerpc64le-linux-gnu.tar.gz", "327dc9d9e43267aed4b06ebc63e140df55e81347b89f808138da48315b2ec4c2"),
    MacOS(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-apple-darwin14.tar.gz", "c1eae6379ed54002113e63d375d9ce7b7a3f3f7c0a0c209b17793c861e8b586f"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-linux-gnu.tar.gz", "542ac01f87f2bf247c4d3f77f6f717760faf942fb4018f47f8b87cd849ca1342"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-linux-musl.tar.gz", "fea5a0477fcb5baef9761828eebe0ad4ce70d0f3322c86b8894e7b741bb1b1e6"),
    FreeBSD(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-unknown-freebsd11.1.tar.gz", "9f99470dfbc16f3e27493236c9b936a50f82305bb0934c4b1dc6b18d7fe1343e"),
    Windows(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-w64-mingw32.tar.gz", "d8332b44a02bf54939a0437b22636086354e60590768a4050534f903a23ba73c"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
