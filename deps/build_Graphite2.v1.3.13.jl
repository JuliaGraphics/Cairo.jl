using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgraphite2"], :libgraphite2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Graphite2_jll.jl/releases/download/Graphite2-v1.3.13+1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Graphite2.v1.3.13.aarch64-linux-gnu.tar.gz", "3cc2a89c0066bab3547e8237ea9466becd1ed2587df6d7fe8c666c38f89a74ed"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Graphite2.v1.3.13.aarch64-linux-musl.tar.gz", "9b9d6422f34e9fc3efe4519f960e16b0b9d5ea35482e6d78a77b8ce8a5b8f5ea"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Graphite2.v1.3.13.arm-linux-gnueabihf.tar.gz", "6adb30d8c301c664d165457db4b0893d3f78efb4a49d8425e6bea04a71fd47e4"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Graphite2.v1.3.13.arm-linux-musleabihf.tar.gz", "5762b77781827a729abdbc2a9534409b330577c483c680cb3357b7ac95c8dd2f"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Graphite2.v1.3.13.i686-linux-gnu.tar.gz", "6acaaf67f7eecac4c035165660833f9de921e7d56a1c3e199012b1be10a80219"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Graphite2.v1.3.13.i686-linux-musl.tar.gz", "9b618d376b0fc7b7b102aaba80636e22d1d897ac42b9135ac21a77b230f442e8"),
    Windows(:i686) => ("$bin_prefix/Graphite2.v1.3.13.i686-w64-mingw32.tar.gz", "42db7771afd71239d0f17ee223517c7e60ec3a580d93972fdc69fe10d2bfae39"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Graphite2.v1.3.13.powerpc64le-linux-gnu.tar.gz", "f340a9f15c8694fc4a6c40b9c5ce0b9c7284d3dd776413f4cf52ed092fa671bc"),
    MacOS(:x86_64) => ("$bin_prefix/Graphite2.v1.3.13.x86_64-apple-darwin14.tar.gz", "4025d5cb3dbbba37349804060c40973fac5fbd2c43d826eee737f8b97fd10134"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Graphite2.v1.3.13.x86_64-linux-gnu.tar.gz", "3b33ff128bac55362221f3e3360837787f7f608db7a66d08317d20ccb68cada7"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Graphite2.v1.3.13.x86_64-linux-musl.tar.gz", "c84777e782f89b8a582fb523931f3375c86bad783cd872f166e9f39f3268c68d"),
    FreeBSD(:x86_64) => ("$bin_prefix/Graphite2.v1.3.13.x86_64-unknown-freebsd11.1.tar.gz", "46e1afeb5df52dc887ceb4efc0dd3ce6039233a9a00043ddcbc2093b5a5c0cfd"),
    Windows(:x86_64) => ("$bin_prefix/Graphite2.v1.3.13.x86_64-w64-mingw32.tar.gz", "4e73df99ea62550d8e2b6bb24399c1adba7a1f27892478f3395f73c82d1ef403"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
