using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libpng16"], :libpng),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/libpng_jll.jl/releases/download/libpng-v1.6.37+2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/libpng.v1.6.37.aarch64-linux-gnu.tar.gz", "b9929971e7b828dbbc8fa51f9d7bd8a00dd3f88dfe3c89ceaecc9422381faf1d"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/libpng.v1.6.37.aarch64-linux-musl.tar.gz", "77ae2e8d6c53a0616e56adad59de764dae0164bf592c2604980e6d1afc6e48ad"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/libpng.v1.6.37.arm-linux-gnueabihf.tar.gz", "1850c5490990400a3db3970820d0d75b7c2fd1ff1bbe197aa6fbe3885aac3d1c"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/libpng.v1.6.37.arm-linux-musleabihf.tar.gz", "d268d72f50be146d8abf05c9f8460c85b6a4826333457d9c41af625cafdb502d"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libpng.v1.6.37.i686-linux-gnu.tar.gz", "8c3c4823f2e647a1eac8e9a5d88980f83ec281b85980605efaad3586cb90a427"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libpng.v1.6.37.i686-linux-musl.tar.gz", "43ae5a8c19daecacfcd32283f8e8c7797b2810beba8f7368316b846317cad627"),
    Windows(:i686) => ("$bin_prefix/libpng.v1.6.37.i686-w64-mingw32.tar.gz", "693630517d1710391eadd7d28144e4832fb411165f4992af491e37fa7f6f0073"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/libpng.v1.6.37.powerpc64le-linux-gnu.tar.gz", "deb698d5ab1c4122f9c79889889cd7024ab32bfb996de5f38d9378719bafb2d7"),
    MacOS(:x86_64) => ("$bin_prefix/libpng.v1.6.37.x86_64-apple-darwin14.tar.gz", "5b05a33d34bcdb7b73268df8f1e35d13d1ed9c8414f7c6af1c035603b317e0d6"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libpng.v1.6.37.x86_64-linux-gnu.tar.gz", "035f4f67cb8063ea21d27b98eb98ebe9a05d16a39368f9b6345108a89649a07f"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libpng.v1.6.37.x86_64-linux-musl.tar.gz", "fa18c305af636121e5970ca0a621dee52bfbafe9369ae827a04ef77afb95cc5e"),
    FreeBSD(:x86_64) => ("$bin_prefix/libpng.v1.6.37.x86_64-unknown-freebsd11.1.tar.gz", "f11e31529b9d6e058e4c0ad3e1ca9f992468f6d11134963bcae67a4c681c7907"),
    Windows(:x86_64) => ("$bin_prefix/libpng.v1.6.37.x86_64-w64-mingw32.tar.gz", "7d4b74fd4ee2e4b92521145640d837150567930509c672fed3954bd508b483e1"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
