using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libpng16"], :libpng),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/libpng_jll.jl/releases/download/libpng-v1.6.37+1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/libpng.v1.6.37.aarch64-linux-gnu.tar.gz", "0d03a679f08d40b5a64b0eeb83e48ddbd94aaf8dea5458ccf3e6e127aabccca9"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/libpng.v1.6.37.aarch64-linux-musl.tar.gz", "ae469092b5414bed3771536a553a1060e5a842cff5a5f8dfdc8006921cb38e34"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/libpng.v1.6.37.arm-linux-gnueabihf.tar.gz", "49cc191076f049495bdfd31f0daa2cad4f75722fc23f8a50f57adb01b96b0e85"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/libpng.v1.6.37.arm-linux-musleabihf.tar.gz", "26032584e8c1d5081ca01ca3f54cce9535ad3e82ac9fa8844351097696d5fd7c"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libpng.v1.6.37.i686-linux-gnu.tar.gz", "9c0e4dfd024814dcf9ebeb7d64db82631d7740c37c2a8c8cf9af8fda5bcb2a17"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libpng.v1.6.37.i686-linux-musl.tar.gz", "1b53c6e8be486356e9da931d398a4d3d5c7a2b0986f3dcead457e25184852db9"),
    Windows(:i686) => ("$bin_prefix/libpng.v1.6.37.i686-w64-mingw32.tar.gz", "e4bc4bcae51a078a3021762e4d432637f72c16bc8c4f6ed46254aa3ff8489961"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/libpng.v1.6.37.powerpc64le-linux-gnu.tar.gz", "d8169a54a69b8964180777de7521dece4db6f41f5f50bcdcf72d80f10a3e18a0"),
    MacOS(:x86_64) => ("$bin_prefix/libpng.v1.6.37.x86_64-apple-darwin14.tar.gz", "5f5c79ecb53375c33a6d7a0e000caac2193e1a0a7ab73a99b801ffa538436d66"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libpng.v1.6.37.x86_64-linux-gnu.tar.gz", "2fecf01db428d988383ed8042690e98732d58eb358c52192db685c5a3bcb4dc0"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libpng.v1.6.37.x86_64-linux-musl.tar.gz", "db00766f25113387efaa1e28ce3f424654cb7608858013d4529413a0ff763977"),
    FreeBSD(:x86_64) => ("$bin_prefix/libpng.v1.6.37.x86_64-unknown-freebsd11.1.tar.gz", "4b084043e6ea5d0fdf67e12fa21037a9bc3823218e000e4ca38725b03c0a2749"),
    Windows(:x86_64) => ("$bin_prefix/libpng.v1.6.37.x86_64-w64-mingw32.tar.gz", "1c40afbaba9fd4943624da4a269f69927ca819108d9509cad53888fce67ec8f4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
