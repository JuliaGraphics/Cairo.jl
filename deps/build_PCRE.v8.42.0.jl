using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libpcre"], :libpcre),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/PCRE_jll.jl/releases/download/PCRE-v8.42.0+1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/PCRE.v8.42.0.aarch64-linux-gnu.tar.gz", "ac4c89ee9d5f0c1502783c9b6716feb9d41fc269e693c7c029f09d7328c88d17"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/PCRE.v8.42.0.aarch64-linux-musl.tar.gz", "094fa1b547bb10857f4699034308fe2846ce1ab3c231dc2b5a07227846fd33d5"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/PCRE.v8.42.0.arm-linux-gnueabihf.tar.gz", "de39be98270ac11283dc2255251c364b6b19213e5b32f852e19ba7825befc62d"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/PCRE.v8.42.0.arm-linux-musleabihf.tar.gz", "85c9aaf757d3db89477afffbf0efb523f43215327acefe65fa31ef9d15bd07c3"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/PCRE.v8.42.0.i686-linux-gnu.tar.gz", "931b2aa322d88eaa64fde47b4c68e31a0b00e3ad210f416a6db9159cb25b2c6c"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/PCRE.v8.42.0.i686-linux-musl.tar.gz", "693a39aa7cbecbdd606683922b8a2d430c525213b2b4f692d113f000762db875"),
    Windows(:i686) => ("$bin_prefix/PCRE.v8.42.0.i686-w64-mingw32.tar.gz", "07f1507df185095d8f2481a790283211daf5dd31182d380154af0800599fd0a9"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/PCRE.v8.42.0.powerpc64le-linux-gnu.tar.gz", "3a1515905189f7ecac446a0b97e540e5a895fb545c0ea4c75b44385862ce3a4c"),
    MacOS(:x86_64) => ("$bin_prefix/PCRE.v8.42.0.x86_64-apple-darwin14.tar.gz", "d53161ecffb09f809ae23a94ce1412a17606267f5f412ec32bbc52a1dd7640e0"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/PCRE.v8.42.0.x86_64-linux-gnu.tar.gz", "9d5680e6c49ccf7ad906033fae228df8e2e4cbe7fca9cf5cec47f97f21def6f4"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/PCRE.v8.42.0.x86_64-linux-musl.tar.gz", "2fcfec0a2e00a37585f005c158472e0ed4fd600e0a0e6493430df981fab42ecb"),
    FreeBSD(:x86_64) => ("$bin_prefix/PCRE.v8.42.0.x86_64-unknown-freebsd11.1.tar.gz", "6ca3004e0e15d603c1f22870d9c6308837a6913c79982a824527a31f7981852b"),
    Windows(:x86_64) => ("$bin_prefix/PCRE.v8.42.0.x86_64-w64-mingw32.tar.gz", "80870bd2056e072f1911a77c83e1b31a32702c662832a61ccf58c30df1b36af4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
