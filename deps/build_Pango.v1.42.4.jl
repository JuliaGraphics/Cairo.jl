using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libpango"], :libpango),
    LibraryProduct(prefix, ["libpangocairo"], :libpangocairo),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Pango_jll.jl/releases/download/Pango-v1.42.4+3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Pango.v1.42.4.aarch64-linux-gnu.tar.gz", "45f9a23c1ae22b39bb1e2f2bd2d7d7bc0ed47acd5009abbfc33ece6fc87724ef"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Pango.v1.42.4.aarch64-linux-musl.tar.gz", "372617e6b8c642711ae12756ef689a3b5a09f9c87835e5c4dfac33624a10bfba"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Pango.v1.42.4.arm-linux-gnueabihf.tar.gz", "c75d2c86470c56636daf919ba92db3a1b9aa9998015d258ef5be6460d2bbd1c4"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Pango.v1.42.4.arm-linux-musleabihf.tar.gz", "9d2110c5703d5aa763d984bd4fc64b1a81daf2ee13e9bed5702659d3500292b9"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Pango.v1.42.4.i686-linux-gnu.tar.gz", "2f82b58f98abde749f79a8cc8fbcb4b1a24c0a232fd3445c3723683bd0f4e7d4"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Pango.v1.42.4.i686-linux-musl.tar.gz", "50e281fdfd6337e0757b167afcc4c9493a3aaa956ba9309b09278035691bf733"),
    Windows(:i686) => ("$bin_prefix/Pango.v1.42.4.i686-w64-mingw32.tar.gz", "4ca346400569df75dd26d64203370444efdd82384a2377985b287c49b7b4717f"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Pango.v1.42.4.powerpc64le-linux-gnu.tar.gz", "f02ee7e843ad4e8fa563d80add464c0a30979e2b04d89391a4acfc2606365d73"),
    MacOS(:x86_64) => ("$bin_prefix/Pango.v1.42.4.x86_64-apple-darwin14.tar.gz", "2b6972277510e2cfa95b24ac2cce5f8decfe55b9edd99b137cf4daf5a948bb13"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Pango.v1.42.4.x86_64-linux-gnu.tar.gz", "4f23f399e5461674d0f7dc4ff689c57c591be3849d53f680a8e3378321bb0c98"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Pango.v1.42.4.x86_64-linux-musl.tar.gz", "09a84fedf9828cfaed05cba5539ead8685ee952f3dfe355de69b299bd8fe04d2"),
    FreeBSD(:x86_64) => ("$bin_prefix/Pango.v1.42.4.x86_64-unknown-freebsd11.1.tar.gz", "236c095c8f75c9c0e6be09b29b92a918afd5fa05acf7c813add8aedbe2248281"),
    Windows(:x86_64) => ("$bin_prefix/Pango.v1.42.4.x86_64-w64-mingw32.tar.gz", "8565ba0324cbca9e5c7fd558c5f350aaae671d8ca5bdb51be26eca14fc3cd01b"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
