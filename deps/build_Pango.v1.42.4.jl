using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libpango", "libpango-1", "libpango-1.0"], :libpango),
    LibraryProduct(prefix, ["libpangocairo", "libpangocairo-1", "libpangocairo-1.0"], :libpangocairo),
    LibraryProduct(prefix, ["libpangoft2", "libpangoft2-1", "libpangoft2-1.0"], :libpangoft),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Pango_jll.jl/releases/download/Pango-v1.42.4+7"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Pango.v1.42.4.aarch64-linux-gnu.tar.gz", "df9fbd64f0dbc23a03b6af98c6e18460a94938afc4e21f599620891048096a3e"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Pango.v1.42.4.aarch64-linux-musl.tar.gz", "f69488280c90decc0039197ac4e3af7eefb85c05556a664915554adf7f3124cf"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Pango.v1.42.4.arm-linux-gnueabihf.tar.gz", "fec66a4cd431f1eee848deeff8769fc87050cf4e3cea5641be17def63f01a3f7"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Pango.v1.42.4.arm-linux-musleabihf.tar.gz", "252c21bd23b24f57e1954ecb38ac704a14c5fedb5daf452b5fe85e1af8594697"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Pango.v1.42.4.i686-linux-gnu.tar.gz", "8d05eda9229fb0a7e14df824bb54d7059dce1a29b939691b6b34f1e622e8c55f"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Pango.v1.42.4.i686-linux-musl.tar.gz", "2ac655f9c25885e7937e0746173d7228ed2f79464ed17b31a2985b65e2badddd"),
    Windows(:i686) => ("$bin_prefix/Pango.v1.42.4.i686-w64-mingw32.tar.gz", "77ad747175d6b3643933a74b87401316058a89abc138181e123b44b9bd3d254e"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Pango.v1.42.4.powerpc64le-linux-gnu.tar.gz", "9f3ebe99e229e02942eb4c3cb554fed972dbb0036cb1adabee145000bd4f1cfa"),
    MacOS(:x86_64) => ("$bin_prefix/Pango.v1.42.4.x86_64-apple-darwin14.tar.gz", "f06af7935be934d5a4f737f402e76f2991f757cb4035548c565d91d106ab7a6a"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Pango.v1.42.4.x86_64-linux-gnu.tar.gz", "66994c67e6da14f195b2c7f6763de56cdfb69b02fcdbb6ad7fb663d550273af8"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Pango.v1.42.4.x86_64-linux-musl.tar.gz", "69c27629e35cae1d3c65df442196c8dcb54658f062c943282598e5d4f838adc1"),
    FreeBSD(:x86_64) => ("$bin_prefix/Pango.v1.42.4.x86_64-unknown-freebsd11.1.tar.gz", "d60d8e04d099aafdcc402782e22ad06bd05292cb3fa400ba897550a96e849330"),
    Windows(:x86_64) => ("$bin_prefix/Pango.v1.42.4.x86_64-w64-mingw32.tar.gz", "eb682515396e2091cf7aaa61645e618f140eb6a4fb03296f9c42f8f1f9930ae5"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)