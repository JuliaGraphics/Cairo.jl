using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgio"], :libgio),
    LibraryProduct(prefix, ["libglib"], :libglib),
    LibraryProduct(prefix, ["libgmodule"], :libgmodule),
    LibraryProduct(prefix, ["libgobject"], :libgobject),
    LibraryProduct(prefix, ["libgthread"], :libgthread),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Glib_jll.jl/releases/download/Glib-v2.59.0+1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Glib.v2.59.0.aarch64-linux-gnu.tar.gz", "a705d4e98b9dd055aa78d24e27bd85de91e899ae34797927e217b7d957d24a78"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Glib.v2.59.0.aarch64-linux-musl.tar.gz", "245f6dfdd025379c73e266824443f893176e1ae90a5c960c46705cfde713b22d"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Glib.v2.59.0.arm-linux-gnueabihf.tar.gz", "8eff551756d00a74c3fea7e70b10e1e96f0d9fbd597a551ff066b1f662ff4a65"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Glib.v2.59.0.arm-linux-musleabihf.tar.gz", "417962eccf3a4070ea9fa5475bea4c7c78989c411e3ca41ba25322cac77bb35d"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Glib.v2.59.0.i686-linux-gnu.tar.gz", "21c733d3faa5a418d191ec45cef017b0e2c7dd88c59382bbbd0fca160144e3b0"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Glib.v2.59.0.i686-linux-musl.tar.gz", "0254092dffd42f5a918ba84998c36e5a7140ec5f9ccf31edf3f04fa51957f48e"),
    Windows(:i686) => ("$bin_prefix/Glib.v2.59.0.i686-w64-mingw32.tar.gz", "8803e8262607267353724573ff3f6f94e1d3e2384113a7f50c6553f0013a9ea1"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Glib.v2.59.0.powerpc64le-linux-gnu.tar.gz", "0431a7b3549726dccf9f8a3c6d622fc69d144e905b75b91661ccf6abeee2523e"),
    MacOS(:x86_64) => ("$bin_prefix/Glib.v2.59.0.x86_64-apple-darwin14.tar.gz", "6dca2ee8f9b32ca94ceec66ae536e0fde82dd851765a6fed1ebc3d2927e0aae4"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Glib.v2.59.0.x86_64-linux-gnu.tar.gz", "1fcf73dea82f1179a56f4a5e84cd705ddd1be0ba6299aa7fcd05f102e2f11931"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Glib.v2.59.0.x86_64-linux-musl.tar.gz", "50956de9ef5fd1ddb906e0551c7c4b070c92138a9423cb9de0357346fcca3fa8"),
    FreeBSD(:x86_64) => ("$bin_prefix/Glib.v2.59.0.x86_64-unknown-freebsd11.1.tar.gz", "d40774676382629dc55d2d7d0cf02102d40275d4bdf1f70140b4ac722157b784"),
    Windows(:x86_64) => ("$bin_prefix/Glib.v2.59.0.x86_64-w64-mingw32.tar.gz", "1f53b8f3e47afa5270daa141e064ba30b20bc98e6010eab71b81d2fa22c34af7"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
