using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libexpat"], :libexpat),
    ExecutableProduct(prefix, "xmlwf", :xmlwf),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Expat_jll.jl/releases/download/Expat-v2.2.7+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Expat.v2.2.7.aarch64-linux-gnu.tar.gz", "6bf46584ec3b91d8e0a173f39b6a640b6ee589dd28c76d8231e985e0e50908a4"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Expat.v2.2.7.aarch64-linux-musl.tar.gz", "42578e73b94f51701145068168d74fc69c1caa1ec503accd535ba4e896f6cebf"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Expat.v2.2.7.arm-linux-gnueabihf.tar.gz", "3941713d5ed51d3976104e80f322f60be04ea00f7268b38dbb2a8338b7276f80"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Expat.v2.2.7.arm-linux-musleabihf.tar.gz", "4d14d14abd3bb3d3abf9c7bff750b1b74faabe29daba94e7811fdafbc0c56634"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Expat.v2.2.7.i686-linux-gnu.tar.gz", "e4e8c5a7cf12bbbaa4389021020a828e6a61d616a0b5a4f260c65a38c6b6a1f4"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Expat.v2.2.7.i686-linux-musl.tar.gz", "51c13dee29fc7c7fba01b177161a9793202bcd90dc82d2ad0b1793a4d483223f"),
    Windows(:i686) => ("$bin_prefix/Expat.v2.2.7.i686-w64-mingw32.tar.gz", "dfba8a20982e97bdb46fb09309d9222e063a3dd566845216e9cf29b63f1ba7c4"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Expat.v2.2.7.powerpc64le-linux-gnu.tar.gz", "b8b1d1f0b828ef0a067e25eff2ef21cc73c71b8dda72b5ab0c790e9478533bc1"),
    MacOS(:x86_64) => ("$bin_prefix/Expat.v2.2.7.x86_64-apple-darwin14.tar.gz", "22bc93059fc96143e5af0fd2d84bef07207f1156ed9710598cf27e9337de2b61"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Expat.v2.2.7.x86_64-linux-gnu.tar.gz", "2de762a3d34bca7880af77a29b20ef215c362829e6c9891acb1618ae3e79ebce"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Expat.v2.2.7.x86_64-linux-musl.tar.gz", "6cfc5b7d9585bd57496b3505b2457fd2b751868f831d6b9f7d7bb931f0dddfbe"),
    FreeBSD(:x86_64) => ("$bin_prefix/Expat.v2.2.7.x86_64-unknown-freebsd11.1.tar.gz", "7fd372632fb534f016a67ca3f6178dd86136b06acb8ccc50d9893d90aa7e620f"),
    Windows(:x86_64) => ("$bin_prefix/Expat.v2.2.7.x86_64-w64-mingw32.tar.gz", "256a21d92a56a4929ff9234ff09ff3b30501932f213e00aaabb1e65b6a0bda45"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
